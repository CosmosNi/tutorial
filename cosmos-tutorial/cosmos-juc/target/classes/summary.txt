总结1
1.所有并发问题都归结为如何协调访问并发状态。可变状态越少，保证线程安全越容易。
2.尽量将域声明为final类型，除非他们的需要是可变的。
3.不可变对象天生是线程安全的
  不可变对象极大地减轻了并发编程的压力。他们简单而且安全，可以在没有锁或者防御性复制的情况下自由地共享
4.封装使管理复杂度变得更可行。
  你固然可以用存储于全局变量的数据来写一个线程安全类。但是你为什么要这么做？在对象中封装数据，让它们能够更加容易
  地保持不变；在对象中封装同步，使它能够更容易地遵守同步策略。
5.用锁来守护每一个可变变量
6.对同一不变约束中的所有变量都使用相同的锁
7.在运行复合操作期间持有锁
8.在非同步的多线程情况下，访问可变变量的程序是存在隐患的。
9.不要依赖于可以需要同步的小聪明。
10.在设计过程中就考虑线程安全。或者在文档中明确地说明他不是线程安全的。
11.文档化你的同步策略。


1.大量相互独立且同类的任务并发处理，会将程序的任务量分配到不同的任务中，这样才能真正的获得性能提升。


