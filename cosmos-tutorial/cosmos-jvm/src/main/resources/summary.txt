jvm总结：
1.程序计数器：一块较小的内存空间，当前线程所执行的字节码的行号指示器。

2.java虚拟机的多线程是通过线程轮流切换轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻
  ，一个处理器（对于多核处理器来说是一个内核）都会执行一条线程中的指令。为了线程切换后能恢复到正确的执行位置
  每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”
  的内存。

3.java虚拟机栈：线程私有，生命周期与线程相同。虚拟机栈描述的是java方法执行的内存模型：
    每个方法在执行的同时都会创建一个栈帧用于存储局部变量表，操作数栈，动态链接，方法出口等。
    每一个方法从调用直至执行完成的过程，就对应一个栈帧在虚拟机栈中入栈到出栈的过程。
3.1局部变量表:存放编译期可知的各种基本数据类型，对象引用，和returnAddress类型
   long和double类型占用两个局部变量空间，其余一个。

4.本地方法栈：类似虚拟机栈。虚拟机栈为虚拟机执行方法（字节码）服务，而本地方法栈为虚拟机使用到的native方法服务。

5.java堆：所有线程共享的一块内存区域，在虚拟机启动时创建。唯一目的就是存放对象实例，几乎所有的对象实例都在这里
          分配内存。
          java堆是垃圾回收管理的主要区域。采用分代收集算法。
6.方法区（Non-Heap）：同java堆，是各个线程共享的内存区域，用于存储已被虚拟机加载的类信息，常量，静态变量，即时编译器
          编译后的代码等数据。
6.1.运行时常量池：方法区的一部分。class文件中除了有类的版本，字段，方法，接口等描述信息，还有一项信息是常量池
                  用以存放编译期昌盛的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放

7.直接内存:不属于虚拟机运行时数据区的一部分，也不是java虚拟机规范中定义的内存区域。
            NIO类，引入了基于通道与缓存区的I/O方式，可以使用Native函数库直接分配堆外内存，然后通过一个存储在
            java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。能够显著提高性能。
            不受java堆大小的限制，但是受本机总内存限制。


